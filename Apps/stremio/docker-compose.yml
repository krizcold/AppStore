name: stremio

services:
  stremioserver:
    image: stremio/server:latest
    container_name: stremioserver
    restart: unless-stopped
    expose:
      - 11470
    environment:
      NO_CORS: "1"
      APP_PATH: "/root/.stremio-server"
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      INTERNAL_URL: "http://stremioserver:11470"
    volumes:
      - type: bind
        source: $DATA_ROOT/AppData/stremio/config
        target: /root/.stremio-server
    networks:
      - pcs
    x-casaos:
      volumes:
        - container: /root/.stremio-server
          description:
            en_us: "Stremio server configuration and data"

  stremioweb:
    image: nginx:alpine
    container_name: stremioweb
    restart: unless-stopped
    user: "0:0"
    volumes:
      - type: bind
        source: $DATA_ROOT/AppData/stremio/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - type: bind
        source: $DATA_ROOT/AppData/stremio/web/build
        target: /usr/share/nginx/html
        read_only: true
      - stremio_dynamic_paths:/tmp/dynamic_paths
    tmpfs:
      - /var/cache/nginx
      - /var/run
    privileged: true
    depends_on:
      - stremioserver
    networks:
      - pcs

  authproxy:
    image: krizcold/nginxhashlock:latest
    container_name: stremioauth
    restart: unless-stopped
    user: "root"
    privileged: true
    expose:
      - 3000
    environment:
      AUTH_HASH: $AUTH_HASH
      USER: "admin"
      PASSWORD: "stremio"
      SESSION_DURATION_HOURS: "720"
      BACKEND_HOST: "stremioweb"
      BACKEND_PORT: "8080"
      LISTEN_PORT: "3000"
      ALLOWED_EXTENSIONS: "js,css,png,jpg,jpeg,gif,ico,svg,woff,woff2,ttf,eot,webp,map,json,wasm,html,m3u8,ts"
      ALLOWED_PATHS: "settings,casting,network-info,device-info,hlsv2"
      DYNAMIC_PATHS_FILE: "/tmp/dynamic_paths/allowed.txt"
      DYNAMIC_PATHS_TTL: "300"
      PRESET_TYPE: "full"
      PRESET_LANGUAGE: "en"
    volumes:
      - stremio_dynamic_paths:/tmp/dynamic_paths
    depends_on:
      - stremioweb
    networks:
      - pcs
    x-casaos:
      envs:
        - container: USER
          description:
            en_us: "Authentication username (change this!)"
        - container: PASSWORD
          description:
            en_us: "Authentication password (change this!)"
        - container: SESSION_DURATION_HOURS
          description:
            en_us: "Session duration in hours (default: 720 = 30 days)"
        - container: ALLOWED_PATHS
          description:
            en_us: "API paths allowed without auth (required for Stremio functionality)"
        - container: PRESET_TYPE
          description:
            en_us: "Addon preset level: minimal, standard, full, kids, factory (default: standard)"
        - container: PRESET_LANGUAGE
          description:
            en_us: "Addon language: en, es, pt, fr, it, de (default: en)"

volumes:
  stremio_dynamic_paths:
    driver: local

networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: authproxy
  author: Stremio
  developer: Stremio
  icon: https://www.stremio.com/website/stremio-logo-small.png
  tagline:
    en_us: "Stream movies, series, live TV, and more (password protected)"
  category: Entertainment
  description:
    en_us: "Stremio is a modern media center that gives you the freedom to watch everything you want. Multi-container setup with official Stremio server, web UI, and password protection. Default login: admin/stremio - Change password via environment variables in app settings."
  title:
    en_us: "Stremio+"
  store_app_id: stremio
  is_uncontrolled: false
  index: /?hash=$AUTH_HASH
  webui_port: 3000
  pre-install-cmd: |
    mkdir -p /DATA/AppData/stremio/{config,web} 2>/dev/null || true
    chmod -R 755 /DATA/AppData/stremio/ 2>/dev/null || true

    # Download Stremio Web UI (official release v5.0.0-beta.27)
    if [ ! -f "/DATA/AppData/stremio/web/build/index.html" ]; then
      wget -q -O /tmp/stremio-web.zip https://github.com/Stremio/stremio-web/releases/download/v5.0.0-beta.27/stremio-web.zip || exit 1
      unzip -q /tmp/stremio-web.zip -d /DATA/AppData/stremio/web/ || exit 1
      rm /tmp/stremio-web.zip
    fi

    # Configure localStorage.json for automatic server URL detection
    if [ -f "/DATA/AppData/stremio/web/build/index.html" ]; then
      wget -q -O /DATA/AppData/stremio/localStorage.json https://raw.githubusercontent.com/tsaridas/stremio-docker/main/localStorage.json || exit 1
      sed -i 's|http://127\.0\.0\.1:11470/|DYNAMIC_SERVER_URL_PLACEHOLDER|g' /DATA/AppData/stremio/localStorage.json
      cp /DATA/AppData/stremio/localStorage.json /DATA/AppData/stremio/web/build/localStorage.json

      # Inject ORIGINAL working auto-configuration script PLUS addon preset loader
      cat > /tmp/stremio-config-script.js <<'JSEOF'
    // Always ensure base config and defaults on every page load (to guarantee parity)
    (function() {
      // Always fetch base config to get default addons (ensures defaults are never lost)
      let defaultAddons = [];
      const baseConfigPromise = fetch("/localStorage.json")
        .then(r=>r.text())
        .then(data=>{
          const parsed=JSON.parse(data.replaceAll("DYNAMIC_SERVER_URL_PLACEHOLDER",window.location.origin+"/"));

          // ALWAYS ensure critical config is set (streaming-server must always exist)
          const profileExists = localStorage.getItem('profile');

          Object.keys(parsed).forEach(key => {
            if (key !== 'profile') {
              // Always set non-profile keys (like streaming-server) to ensure they're never missing
              localStorage.setItem(key, JSON.stringify(parsed[key]));
            } else if (!profileExists && !sessionStorage.getItem("stremio_base_loaded")) {
              // First load only: set complete profile (includes default addons)
              localStorage.setItem('profile', JSON.stringify(parsed[key]));
              console.log('[Stremio] Initialized profile with streaming-server config');
            }
          });

          if (!sessionStorage.getItem("stremio_base_loaded")) {
            sessionStorage.setItem("stremio_base_loaded","true");
            console.log("Stremio base config loaded for:",window.location.origin);
          }

          // Extract default addons to ensure they're always present
          if (parsed.profile && parsed.profile.addons) {
            defaultAddons = parsed.profile.addons;
            console.log('[Stremio] Found', defaultAddons.length, 'default addons');
          }
        });

      // AFTER base config, load addon preset (runs on EVERY page load to force shared addons)
      baseConfigPromise.then(() => {
        if(!sessionStorage.getItem("stremio_addons_loaded")){
          return fetch('https://cdn.statically.io/gh/DryKillLogic/stremio-account-bootstrapper/main/public/preset.json')
            .then(r => r.json())
            .then(presetData => {
          const presetType = 'full';
          const presetLang = 'en';
          const serverUrl = window.location.origin + '/';

          if (presetData.presets && presetData.presets[presetType] && presetData.languages && presetData.languages[presetLang]) {
            const addonList = presetData.presets[presetType];
            const langData = presetData.languages[presetLang];
            const addons = [];

            addonList.forEach(addonId => {
              if (langData[addonId]) {
                const addonData = langData[addonId];
                const manifest = { ...addonData.manifest };
                const transportUrl = addonData.transportUrl || manifest.transportUrl || '';

                // Skip addons with empty transportUrl
                if (!transportUrl || transportUrl.trim() === '') {
                  console.log('[Stremio] Skipping addon with empty transportUrl:', addonId);
                  return;
                }

                addons.push({
                  transportUrl: transportUrl.replace(/DYNAMIC_SERVER_URL_PLACEHOLDER/g, serverUrl),
                  transportName: addonData.transportName || 'http',
                  manifest: manifest,
                  flags: addonData.flags || {}
                });
              }
            });

            // Merge defaults + existing + preset addons (always ensure defaults are present)
            const profile = JSON.parse(localStorage.getItem('profile') || '{}');
            const existingAddons = profile.addons || [];

            // Track which addons are defaults (these should NEVER be replaced)
            const defaultAddonIds = new Set();
            defaultAddons.forEach(addon => {
              const addonId = addon.manifest?.id || addon.transportUrl;
              if (addonId) defaultAddonIds.add(addonId);
            });

            // Create map for deduplication and updates
            const addonMap = new Map();

            // 1. Start with default addons (ALWAYS present and NEVER replaced)
            defaultAddons.forEach(addon => {
              const addonId = addon.manifest?.id || addon.transportUrl;
              if (addonId) addonMap.set(addonId, addon);
            });

            // 2. Add existing addons that aren't defaults (user additions)
            existingAddons.forEach(addon => {
              const addonId = addon.manifest?.id || addon.transportUrl;
              if (addonId && !addonMap.has(addonId)) {
                addonMap.set(addonId, addon);
              }
            });

            // 3. Add/update preset addons (but NEVER replace defaults!)
            addons.forEach(addon => {
              const addonId = addon.manifest?.id || addon.transportUrl;
              if (addonId && !defaultAddonIds.has(addonId)) {
                // Only add/update if it's NOT a default addon
                addonMap.set(addonId, addon);
              }
            });

            const mergedAddons = Array.from(addonMap.values());

            profile.addons = mergedAddons;
            localStorage.setItem('profile', JSON.stringify(profile));

              sessionStorage.setItem("stremio_addons_loaded","true");
              console.log('[Stremio] Force-applied', presetType, 'preset with', addons.length, 'addons');
            }
          })
          .catch(err => {
            console.error('[Stremio] Failed to load preset:', err);
          });
        }
      });
    })();
    JSEOF

      # Inject the script into index.html before </head> using Python (handles minified HTML perfectly)
      python3 <<'PYEOF'
    with open('/DATA/AppData/stremio/web/build/index.html', 'r') as f:
        html = f.read()
    with open('/tmp/stremio-config-script.js', 'r') as f:
        script = f.read()
    # Replace first occurrence of </head> with script + </head>
    html = html.replace('</head>', '<script>\n' + script + '\n</script>\n</head>', 1)
    with open('/DATA/AppData/stremio/web/build/index.html', 'w') as f:
        f.write(html)
    print('[Pre-install] Script injected successfully')
    PYEOF

      rm /tmp/stremio-config-script.js
    fi

    # Create nginx reverse proxy configuration
    if [ ! -f "/DATA/AppData/stremio/nginx.conf" ]; then
      cat > /DATA/AppData/stremio/nginx.conf <<'EOF'
    worker_processes auto;
    error_log /dev/stderr warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /dev/stdout main;

        sendfile on;
        keepalive_timeout 65;

        server {
            listen 8080;
            server_name _;

            # Serve static files from stremio-web
            location ~ \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|map|json|wasm|html)$ {
                root /usr/share/nginx/html;
                try_files $uri =404;
            }

            # Serve index.html for root
            location = / {
                root /usr/share/nginx/html;
                try_files /index.html =404;
            }

            # Serve other HTML files and directories, or proxy to backend
            location / {
                root /usr/share/nginx/html;
                try_files $uri @backend;
            }

            # Proxy everything else to stremio-server
            location @backend {
                proxy_pass http://stremioserver:11470;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
        }
    }
    EOF
    fi
