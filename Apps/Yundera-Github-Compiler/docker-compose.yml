name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        npm run setup
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    # Create a simplified watcher that waits for compose file and fixes docker.sock
    cat > /tmp/yundera-docker-sock-fixer.sh << 'EOF'
    #!/bin/bash
    echo "🔄 Yundera docker.sock fixer started at $(date)"
    
    COMPOSE_FILE="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    CONTAINER_NAME="yunderagithubcompiler"
    
    echo "📁 Target compose file: $COMPOSE_FILE"
    echo "🐳 Target container: $CONTAINER_NAME"
    
    # Step 1: Wait for compose file to exist
    echo "🔍 Step 1: Waiting for compose file to exist..."
    counter=0
    max_wait=60  # 60 seconds max wait
    
    while [ $counter -lt $max_wait ]; do
      if [ -f "$COMPOSE_FILE" ]; then
        echo "✅ Compose file exists after $counter seconds"
        break
      fi
      echo "⏳ Compose file not found yet... (${counter}s/${max_wait}s)"
      sleep 1
      counter=$((counter + 1))
    done
    
    if [ ! -f "$COMPOSE_FILE" ]; then
      echo "❌ Compose file not found after ${max_wait}s, exiting"
      exit 1
    fi
    
    # Step 2: Check if docker.sock is already mounted
    echo "🔍 Step 2: Checking docker.sock mount status..."
    if grep -q "/var/run/docker.sock:/var/run/docker.sock" "$COMPOSE_FILE"; then
      echo "✅ Docker.sock is already mounted in compose file"
    else
      echo "❌ Docker.sock is NOT mounted in compose file"
      
      # Step 3: Add docker.sock mount
      echo "🔧 Step 3: Adding docker.sock mount to compose file..."
      
      # Backup original
      cp "$COMPOSE_FILE" "$COMPOSE_FILE.backup"
      echo "📋 Backed up compose file to $COMPOSE_FILE.backup"
      
      # Add docker.sock mount after the last volume entry
      if grep -q "volumes:" "$COMPOSE_FILE"; then
        # Find the last volume line and add docker.sock after it
        sed -i '/volumes:/,/^[[:space:]]*[^[:space:]-]/ {
          /^[[:space:]]*-/ {
            $ a\      - /var/run/docker.sock:/var/run/docker.sock
          }
        }' "$COMPOSE_FILE"
        echo "✅ Added docker.sock mount to existing volumes section"
      else
        # No volumes section, add one
        sed -i '/^[[:space:]]*yunderagithubcompiler:/,/^[[:space:]]*[^[:space:]]/ {
          /^[[:space:]]*[^[:space:]]/ i\    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock
        }' "$COMPOSE_FILE"
        echo "✅ Added volumes section with docker.sock mount"
      fi
      
      # Verify the change
      if grep -q "/var/run/docker.sock:/var/run/docker.sock" "$COMPOSE_FILE"; then
        echo "✅ Docker.sock mount successfully added to compose file"
      else
        echo "❌ Failed to add docker.sock mount to compose file"
        exit 1
      fi
    fi
    
    # Step 4: Wait for container to be created
    echo "🔍 Step 4: Waiting for container to be created..."
    counter=0
    max_wait=30  # 30 seconds max wait
    
    while [ $counter -lt $max_wait ]; do
      if docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
        echo "✅ Container $CONTAINER_NAME found after $counter seconds"
        break
      fi
      echo "⏳ Container not found yet... (${counter}s/${max_wait}s)"
      sleep 1
      counter=$((counter + 1))
    done
    
    if ! docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
      echo "❌ Container $CONTAINER_NAME not found after ${max_wait}s"
      echo "📋 Available containers:"
      docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
      exit 1
    fi
    
    # Step 5: Restart the container with new compose file
    echo "🔄 Step 5: Restarting container with updated compose file..."
    
    # Get container status
    CONTAINER_STATUS=$(docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Status}}")
    echo "📊 Container status: $CONTAINER_STATUS"
    
    # Stop the container first
    echo "🛑 Stopping container $CONTAINER_NAME..."
    docker stop "$CONTAINER_NAME" || echo "⚠️  Container might not be running"
    
    # Remove the container
    echo "🗑️  Removing container $CONTAINER_NAME..."
    docker rm "$CONTAINER_NAME" || echo "⚠️  Container might not exist"
    
    # Recreate with docker-compose
    echo "🚀 Recreating container with docker-compose..."
    cd "/DATA/AppData/casaos/apps/yunderagithubcompiler"
    docker-compose up -d
    
    # Verify the restart
    echo "✅ Step 6: Verifying restart..."
    sleep 5
    
    NEW_STATUS=$(docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}")
    if [ -n "$NEW_STATUS" ]; then
      echo "✅ Container $CONTAINER_NAME is now running: $NEW_STATUS"
      
      # Check if docker.sock is actually mounted
      if docker exec "$CONTAINER_NAME" test -S /var/run/docker.sock 2>/dev/null; then
        echo "✅ Docker.sock is successfully mounted and accessible in container"
      else
        echo "❌ Docker.sock is NOT accessible in container"
      fi
    else
      echo "❌ Container $CONTAINER_NAME is not running after restart"
    fi
    
    echo "🏁 Watcher script completed at $(date)"
    EOF
    
    # Make it executable and run in background
    chmod +x /tmp/yundera-docker-sock-fixer.sh
    nohup /tmp/yundera-docker-sock-fixer.sh > /tmp/yundera-docker-sock-fixer.log 2>&1 &
    
    echo "🚀 Docker.sock fixer launched, check logs at /tmp/yundera-docker-sock-fixer.log"
