name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    user: root
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        chmod 644 /app/casaos-config/docker-compose.yml || true
        # Check if docker socket exists and test permissions
        if [ -S /var/run/docker.sock ]; then
          echo "🔍 Docker socket found, testing access..."
          docker --version && echo "✅ Docker access works" || echo "❌ Docker access failed"
        fi
        npm run setup
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    # Create a background restart handler that monitors docker-compose.yml changes
    cat > /tmp/yundera-restart-handler.sh << 'EOF'
    #!/bin/bash
    echo "🔄 Yundera restart handler started, monitoring docker-compose.yml..."
    echo "🕐 Current time: $(date)"
    
    COMPOSE_FILE="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    echo "📁 Monitoring compose file: $COMPOSE_FILE"
    
    # Check every 3 seconds for up to 30 seconds (10 attempts)
    counter=0
    max_attempts=10
    
    while [ $counter -lt $max_attempts ]; do
      echo "🔍 Checking for docker.sock in compose file... (attempt $((counter + 1))/$max_attempts)"
      
      if [ -f "$COMPOSE_FILE" ]; then
        # Check if docker.sock is now in the compose file
        if grep -q "/var/run/docker.sock" "$COMPOSE_FILE"; then
          echo "📡 Docker socket detected in compose file! Triggering restart..."
          echo "📁 Using compose file: $COMPOSE_FILE"
          
          # Execute the restart command exactly like CasaOS does
          echo "🚀 Restarting container exactly like CasaOS restart button..."
          
          # CasaOS uses: docker compose -p <app-name> restart
          # Extract the project name from the compose file
          PROJECT_NAME="yunderagithubcompiler"
          
          # Try docker compose (v2) first - the CasaOS way
          if command -v docker >/dev/null 2>&1; then
            echo "🔄 Trying: docker compose -p $PROJECT_NAME restart"
            if docker compose -p "$PROJECT_NAME" restart; then
              echo "✅ Success with 'docker compose restart' (CasaOS method)"
            else
              echo "⚠️  'docker compose restart' failed, trying with compose file..."
              
              # Try with explicit compose file
              echo "🔄 Trying: docker compose -f $COMPOSE_FILE -p $PROJECT_NAME restart"
              if docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" restart; then
                echo "✅ Success with compose file specified"
              else
                echo "❌ Both restart methods failed"
                exit 1
              fi
            fi
          else
            echo "❌ Docker command not found"
            exit 1
          fi
          
          echo "✅ Restart completed, handler exiting at $(date)"
          exit 0
        else
          echo "⏳ Docker socket not found yet in compose file..."
        fi
      else
        echo "⚠️  Compose file not found: $COMPOSE_FILE"
      fi
      
      sleep 3
      counter=$((counter + 1))
    done
    
    echo "⏰ Timeout reached after $((max_attempts * 3)) seconds, handler exiting at $(date)"
    exit 1
    EOF
    
    # Make it executable and run in background
    chmod +x /tmp/yundera-restart-handler.sh
    nohup /tmp/yundera-restart-handler.sh > /tmp/yundera-restart.log 2>&1 &
    
    echo "🚀 Background restart handler launched"
