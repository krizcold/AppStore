name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    user: root
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        chmod 644 /app/casaos-config/docker-compose.yml || true
        # Check if docker socket exists and test permissions
        if [ -S /var/run/docker.sock ]; then
          echo "🔍 Docker socket found, testing access..."
          docker --version && echo "✅ Docker access works" || echo "❌ Docker access failed"
        fi
        npm run setup
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    # Create a background restart handler that monitors docker-compose.yml changes
    cat > /tmp/yundera-restart-handler.sh << 'EOF'
    #!/bin/bash
    echo "🔄 Yundera restart handler started, monitoring docker-compose.yml..."
    echo "🕐 Current time: $(date)"
    
    COMPOSE_FILE="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    echo "📁 Monitoring compose file: $COMPOSE_FILE"
    
    # Check every 3 seconds for up to 30 seconds (10 attempts)
    counter=0
    max_attempts=10
    
    while [ $counter -lt $max_attempts ]; do
      echo "🔍 Checking for docker.sock in compose file... (attempt $((counter + 1))/$max_attempts)"
      
      if [ -f "$COMPOSE_FILE" ]; then
        # Check if docker.sock is now in the compose file
        if grep -q "/var/run/docker.sock" "$COMPOSE_FILE"; then
          echo "📡 Docker socket detected in compose file! Triggering restart..."
          echo "📁 Using compose file: $COMPOSE_FILE"
          
          # Apply new compose configuration exactly like CasaOS does
          echo "🚀 Applying new compose configuration like CasaOS applyComposeAppSettings..."
          
          # CasaOS uses applyComposeAppSettings which does:
          # 1. Backs up current compose file
          # 2. Applies new configuration 
          # 3. Pulls updated images
          # 4. Gracefully updates containers
          
          PROJECT_NAME="yunderagithubcompiler"
          
          # Method 1: Use CasaOS API to apply settings (preferred)
          echo "🔄 Method 1: First, let's find the correct app name..."
          
          # Debug: Check ALL CasaOS app endpoints to find where our app might be
          echo "📋 Debugging: Checking ALL CasaOS app endpoints..."
          
          echo "1️⃣ Compose apps:"
          curl -s "http://localhost:8080/v2/app_management/compose" > /tmp/casaos-compose.log 2>&1
          cat /tmp/casaos-compose.log
          
          echo -e "\n2️⃣ Container apps (V1):"
          curl -s "http://localhost:8080/v1/container" > /tmp/casaos-container.log 2>&1
          cat /tmp/casaos-container.log
          
          echo -e "\n3️⃣ Container apps (V2):"
          curl -s "http://localhost:8080/v2/app_management/container" > /tmp/casaos-container-v2.log 2>&1
          cat /tmp/casaos-container-v2.log
          
          echo -e "\n4️⃣ All app management:"
          curl -s "http://localhost:8080/v2/app_management" > /tmp/casaos-all.log 2>&1
          cat /tmp/casaos-all.log
          
          echo -e "\n5️⃣ Direct Docker check - ALL containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | head -20
          
          echo -e "\n6️⃣ Looking for any yundera-related containers:"
          docker ps --filter "name=yundera" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          
          echo -e "\n7️⃣ Looking for any github-related containers:"
          docker ps --filter "name=github" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          
          echo -e "\n8️⃣ Looking for any compiler-related containers:"
          docker ps --filter "name=compiler" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          
          echo -e "\n9️⃣ All containers with 'casaos' labels:"
          docker ps --filter "label=casaos" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          
          # Search for our app in ALL the endpoints we just checked
          echo -e "\n🔍 Searching for our app in all CasaOS registries..."
          
          ACTUAL_APP_NAME=""
          APP_TYPE=""
          
          # Check compose apps
          if grep -q "github\|compiler\|yunderagithubcompiler" /tmp/casaos-compose.log; then
            ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*github[^"]*"' /tmp/casaos-compose.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*compiler[^"]*"' /tmp/casaos-compose.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"yunderagithubcompiler"' /tmp/casaos-compose.log | sed 's/"name":"\([^"]*\)"/\1/')
            [ -n "$ACTUAL_APP_NAME" ] && APP_TYPE="compose"
          fi
          
          # Check container apps (V1)
          if [ -z "$ACTUAL_APP_NAME" ] && grep -q "github\|compiler\|yunderagithub" /tmp/casaos-container.log; then
            ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*github[^"]*"' /tmp/casaos-container.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*compiler[^"]*"' /tmp/casaos-container.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"yunderagithubcompiler"' /tmp/casaos-container.log | sed 's/"name":"\([^"]*\)"/\1/')
            [ -n "$ACTUAL_APP_NAME" ] && APP_TYPE="container-v1"
          fi
          
          # Check container apps (V2)
          if [ -z "$ACTUAL_APP_NAME" ] && grep -q "github\|compiler\|yunderagithub" /tmp/casaos-container-v2.log; then
            ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*github[^"]*"' /tmp/casaos-container-v2.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*compiler[^"]*"' /tmp/casaos-container-v2.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            [ -z "$ACTUAL_APP_NAME" ] && ACTUAL_APP_NAME=$(grep -o '"name":"yunderagithubcompiler"' /tmp/casaos-container-v2.log | sed 's/"name":"\([^"]*\)"/\1/')
            [ -n "$ACTUAL_APP_NAME" ] && APP_TYPE="container-v2"
          fi
          
          if [ -n "$ACTUAL_APP_NAME" ]; then
            echo "🎯 Found app: $ACTUAL_APP_NAME (type: $APP_TYPE)"
          else
            echo "❌ App not found in ANY CasaOS registry!"
            echo "💡 This suggests the app was never properly installed through CasaOS"
            echo "🐳 But Docker shows the container exists, so it was created somehow"
            echo "🚨 CRITICAL: We have a 'ghost' container - exists in Docker but not in CasaOS"
          fi
          
          # Method 1: Retry CasaOS API with delays (app might need time to register)
          echo "🔄 Method 1: Trying CasaOS API with retries (app might need time to register)..."
          
          API_SUCCESS=false
          for attempt in {1..5}; do
            echo "🔄 API Attempt $attempt/5: Checking if app is now registered..."
            
            # Refresh the app list
            curl -s "http://localhost:8080/v2/app_management/compose" > /tmp/casaos-apps-retry.log 2>&1
            
            # Look for our app again
            RETRY_APP_NAME=$(grep -o '"name":"[^"]*github[^"]*"' /tmp/casaos-apps-retry.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            if [ -z "$RETRY_APP_NAME" ]; then
              RETRY_APP_NAME=$(grep -o '"name":"[^"]*compiler[^"]*"' /tmp/casaos-apps-retry.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
            fi
            if [ -z "$RETRY_APP_NAME" ]; then
              RETRY_APP_NAME=$(grep -o '"name":"yunderagithubcompiler"' /tmp/casaos-apps-retry.log | sed 's/"name":"\([^"]*\)"/\1/')
            fi
            
            if [ -n "$RETRY_APP_NAME" ]; then
              echo "🎯 Found app in registry: $RETRY_APP_NAME"
              
              echo "🔄 Trying CasaOS API to apply settings to: $RETRY_APP_NAME"
              if curl -s -X PUT "http://localhost:8080/v2/app_management/compose/$RETRY_APP_NAME" \
                   -H "Content-Type: application/yaml" \
                   --data-binary "@$COMPOSE_FILE" > /tmp/casaos-apply-retry.log 2>&1; then
                echo "✅ Success with CasaOS API apply method!"
                cat /tmp/casaos-apply-retry.log
                API_SUCCESS=true
                break
              else
                echo "⚠️  API call failed on attempt $attempt"
                cat /tmp/casaos-apply-retry.log
              fi
            else
              echo "⏳ App not found in registry yet (attempt $attempt/5)"
            fi
            
            if [ $attempt -lt 5 ]; then
              echo "⏰ Waiting 3 seconds before next attempt..."
              sleep 3
            fi
          done
          
          # If API method failed after all retries, we're out of options
          if [ "$API_SUCCESS" = false ]; then
            echo "❌ All API attempts failed. The app may not be compatible with CasaOS compose management."
            echo "💡 You may need to restart manually through the CasaOS UI."
            exit 1
          fi
          
          echo "✅ Restart completed, handler exiting at $(date)"
          exit 0
        else
          echo "⏳ Docker socket not found yet in compose file..."
        fi
      else
        echo "⚠️  Compose file not found: $COMPOSE_FILE"
      fi
      
      sleep 3
      counter=$((counter + 1))
    done
    
    echo "⏰ Timeout reached after $((max_attempts * 3)) seconds, handler exiting at $(date)"
    exit 1
    EOF
    
    # Make it executable and run in background
    chmod +x /tmp/yundera-restart-handler.sh
    nohup /tmp/yundera-restart-handler.sh > /tmp/yundera-restart.log 2>&1 &
    
    echo "🚀 Background restart handler launched"
