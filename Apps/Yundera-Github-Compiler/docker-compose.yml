name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    user: "root"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        npm run setup
    environment:
      # Application settings
      WEBUI_PORT: "3000"
      
      # CasaOS integration
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      DATA_ROOT: $DATA_ROOT
      
      # Yundera platform integration
      DOMAIN: $DOMAIN
      PROVIDER_STR: $PROVIDER_STR
      UID: $UID
      DEFAULT_PWD: $DEFAULT_PWD
      PUBLIC_IP: $PUBLIC_IP
      DEFAULT_USER: $DEFAULT_USER
      
      # Authentication and paths
      JWT_SECRET: $JWT_SECRET
      AUTHORITY_ENDPOINT: $AUTHORITY_ENDPOINT
      COMPOSE_FOLDER_PATH: $COMPOSE_FOLDER_PATH
      BASE_PATH: $BASE_PATH
      MOCK: $MOCK
      
      # Pass through the host's CasaOS environment variables.
      # These will be populated by the AppStore during installation.
      PUID: $PUID
      PGID: $PGID
      REF_DOMAIN: $REF_DOMAIN
      REF_NET: $REF_NET
      REF_PORT: $REF_PORT
      REF_SCHEME: $REF_SCHEME
      REF_SEPARATOR: $REF_SEPARATOR
      
      # Debug/logging settings
      LOG_APPS_BEACON: $LOG_APPS_BEACON
      
      user: $user
      default_pwd: $default_pwd
      public_ip: $public_ip

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # persistent UI data storage
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/uidata
        target: /app/uidata

      # Writable mount for app metadata
      - type: bind
        source: /DATA/AppData
        target: /DATA/AppData

      # Bind mount for the main app directory
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /DATA/AppData/casaos/apps/yunderagithubcompiler
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /app/uidata
          description:
            en_us: "Persistent UI data storage."

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    # Generate the hash value that will be embedded into the background script.
    AUTH_HASH=$(openssl rand -hex 64)
    
    echo "🚀 Yundera GitHub Compiler pre-install starting..."
    
    # Setup SSH access for pre-install commands with PROPER USER PERMISSIONS
    # Log everything to help debug failures
    SSH_SETUP_LOG="/tmp/yundera-ssh-setup-$(date +%Y%m%d-%H%M%S).log"
    echo "🔧 Setting up SSH access with user-manageable permissions (logging to $SSH_SETUP_LOG)..."
    
    (
        echo "=== SSH Setup Started at $(date) ==="
        echo "Host: $(hostname)"
        echo "User: $(whoami)"
        echo "UID/GID: $(id)"
        echo "Working directory: $(pwd)"
        echo ""
        
        echo "📁 Creating directories..."
        # Ensure base directories exist with proper permissions for user access
        mkdir -p /DATA/AppData/yunderagithubcompiler/uidata/.ssh || { echo "❌ Failed to create container SSH dir"; exit 1; }
        mkdir -p /home/ubuntu/.ssh || { echo "❌ Failed to create ubuntu SSH dir"; exit 1; }
        echo "✅ Directories created"
        
        echo "🔒 Setting permissions..."
        # Set proper permissions - user must be able to manage these files!
        chmod 755 /DATA/AppData/yunderagithubcompiler || { echo "❌ Failed chmod on base dir"; exit 1; }
        chmod 755 /DATA/AppData/yunderagithubcompiler/uidata || { echo "❌ Failed chmod on uidata dir"; exit 1; }
        chmod 755 /DATA/AppData/yunderagithubcompiler/uidata/.ssh || { echo "❌ Failed chmod on container SSH dir"; exit 1; }
        chmod 700 /home/ubuntu/.ssh || { echo "❌ Failed chmod on ubuntu SSH dir"; exit 1; }
        echo "✅ Permissions set"
        
        echo "👤 Setting ownership..."
        # Set proper ownership if possible (non-critical if fails)
        if chown -R $PUID:$PGID /DATA/AppData/yunderagithubcompiler/ 2>/dev/null; then
            echo "✅ Ownership set to $PUID:$PGID"
        else
            echo "⚠️ Could not set ownership (non-critical)"
        fi
    ) > "$SSH_SETUP_LOG" 2>&1
    
    # Continue SSH setup in the same log file
    (
        echo ""
        echo "🔐 Checking for existing SSH keys..."
        if [ ! -f "/DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519" ]; then
            echo "🔐 Generating SSH key pair..."
            echo "   Command: ssh-keygen -t ed25519 -f /DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519 -N '' -C yundera-compiler@container"
            
            # Check if ssh-keygen exists
            if ! command -v ssh-keygen >/dev/null 2>&1; then
                echo "❌ ssh-keygen not found!"
                echo "Available commands in PATH:"
                echo "$PATH" | tr ':' '\n' | while read dir; do ls "$dir"/ssh* 2>/dev/null | head -5; done
                exit 1
            fi
            
            # Generate SSH key in container data directory
            if ssh-keygen -t ed25519 -f "/DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519" -N "" -C "yundera-compiler@container"; then
                echo "✅ SSH key generation successful"
                
                # Set proper permissions - user can view/manage, but keys are protected
                chmod 600 /DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519 || echo "❌ Failed to chmod private key"
                chmod 644 /DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519.pub || echo "❌ Failed to chmod public key"
                
                echo "✅ SSH key permissions set"
            else
                echo "❌ SSH key generation failed!"
                exit 1
            fi
        else
            echo "✅ SSH key pair already exists"
        fi
        
        echo ""
        echo "🔑 Setting up authorized_keys..."
        # Add public key to ubuntu user's authorized_keys (this user has access to home directory)
        if [ -f "/DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519.pub" ]; then
            PUBLIC_KEY=$(cat /DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519.pub)
            echo "🔑 Public key content: $PUBLIC_KEY"
            echo "   Key length: ${#PUBLIC_KEY} characters"
            
            # Ensure authorized_keys exists and add key if not already present
            touch /home/ubuntu/.ssh/authorized_keys || { echo "❌ Failed to create authorized_keys"; exit 1; }
            
            if ! grep -Fq "$PUBLIC_KEY" /home/ubuntu/.ssh/authorized_keys 2>/dev/null; then
                echo "$PUBLIC_KEY" >> /home/ubuntu/.ssh/authorized_keys || { echo "❌ Failed to add key to authorized_keys"; exit 1; }
                echo "✅ SSH public key added to ubuntu@host authorized_keys"
            else
                echo "✅ SSH public key already in ubuntu@host authorized_keys"
            fi
            
            # Set proper permissions for SSH files
            chmod 600 /home/ubuntu/.ssh/authorized_keys || echo "❌ Failed to chmod authorized_keys"
            
            # Verify the key was added
            if grep -Fq "$PUBLIC_KEY" /home/ubuntu/.ssh/authorized_keys; then
                echo "✅ Verification: Key found in authorized_keys"
                echo "   authorized_keys file size: $(wc -l /home/ubuntu/.ssh/authorized_keys | awk '{print $1}') lines"
            else
                echo "❌ Verification failed: Key not found in authorized_keys"
                exit 1
            fi
            
            echo "🔑 SSH setup completed - apps can now SSH to ubuntu@host"
        else
            echo "❌ SSH public key not found after generation"
            echo "   Expected location: /DATA/AppData/yunderagithubcompiler/uidata/.ssh/id_ed25519.pub"
            echo "   Directory listing:"
            ls -la /DATA/AppData/yunderagithubcompiler/uidata/.ssh/ 2>/dev/null || echo "   Directory does not exist"
            exit 1
        fi
        
        echo ""
        echo "=== SSH Setup Completed Successfully at $(date) ==="
    ) >> "$SSH_SETUP_LOG" 2>&1
    
    echo "✅ SSH setup completed with user-manageable file permissions (check $SSH_SETUP_LOG for details)"
    
    # Create a simplified watcher that waits for compose file and fixes docker.sock
    # We use `EOF` without quotes to allow the parent shell to expand ${AUTH_HASH} into the script's text.
    # All other dollar signs are escaped (\$) to be treated as literal characters by the background script.
    cat > /tmp/yundera-docker-sock-fixer.sh << EOF
    #!/bin/bash
    echo "🔄 Yundera docker.sock fixer started at \$(date)"
    
    COMPOSE_FILE="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    CONTAINER_NAME="yunderagithubcompiler"
    
    echo "📁 Target compose file: \$COMPOSE_FILE"
    echo "🐳 Target container: \$CONTAINER_NAME"
    
    # Get Docker group ID from host system
    echo "🔍 Detecting Docker group ID..."
    if [ -S /var/run/docker.sock ]; then
      DOCKER_GID=\$(stat -c '%g' /var/run/docker.sock)
      echo "✅ Docker group ID detected: \$DOCKER_GID"
    else
      echo "❌ Docker socket not found on host, using fallback GID"
      DOCKER_GID=999
    fi
    
    # Step 1: Wait for compose file to exist
    echo "🔍 Step 1: Waiting for compose file to exist..."
    counter=0
    max_wait=120  # 120 seconds max wait (2 minutes)
    
    while [ \$counter -lt \$max_wait ]; do
      if [ -f "\$COMPOSE_FILE" ]; then
        echo "✅ Compose file exists after \$counter seconds"
        break
      fi
      echo "⏳ Compose file not found yet... (\${counter}s/\${max_wait}s)"
      sleep 2
      counter=\$((counter + 2))
    done
    
    if [ ! -f "\$COMPOSE_FILE" ]; then
      echo "❌ Compose file not found after \${max_wait}s, exiting"
      exit 1
    fi
    
    # Step 2: Check if docker.sock is already mounted
    SERVICE_SECTION=\$(awk '/^[[:space:]]*yunderagithubcompiler:/,/^[[:space:]]*x-casaos:/ {
      if (/^[[:space:]]*x-casaos:/) exit;
      print
    }' "\$COMPOSE_FILE")
    
    if echo "\$SERVICE_SECTION" | grep -q "/var/run/docker.sock:/var/run/docker.sock"; then
      echo "✅ Docker.sock is already mounted in service volumes section"
    else
      echo "❌ Docker.sock is NOT mounted in service volumes section"
      
      # Step 3: Add docker.sock mount and environment variables
      echo "🔧 Step 3: Adding docker.sock mount to compose file..."
      
      cp "\$COMPOSE_FILE" "\$COMPOSE_FILE.backup"
      echo "📋 Backed up compose file to \$COMPOSE_FILE.backup"
      
      if echo "\$SERVICE_SECTION" | grep -q "volumes:"; then
        echo "📁 Found existing volumes section in service"
        
        sed -i '/^[[:space:]]*volumes:/,/^[[:space:]]*networks:/ {
          /^[[:space:]]*read_only:[[:space:]]*true/ {
            a\            - type: bind\n              source: /var/run/docker.sock\n              target: /var/run/docker.sock
          }
        }' "\$COMPOSE_FILE"
        
        echo "🔧 Adding Docker group ID and AUTH_HASH to environment variables..."
        
        sed -i "s/WEBUI_PORT: \".*\"/&\\n            DOCKER_GID: \"\$DOCKER_GID\"\\n            AUTH_HASH: \"${AUTH_HASH}\"/" "\$COMPOSE_FILE"
        
        echo "✅ Added docker.sock mount and environment variables to existing sections."
      else
        echo "📁 No volumes section found in service, adding one"
        
        sed -i '/^[[:space:]]*yunderagithubcompiler:/,/^[[:space:]]*networks:/ {
          /^[[:space:]]*networks:/ i\    volumes:\n        - type: bind\n          source: /var/run/docker.sock\n          target: /var/run/docker.sock\n
        }' "\$COMPOSE_FILE"
        echo "✅ Added volumes section with docker.sock mount"
      fi

      # Modify the index line to include the hash
      sed -i "s|index: /|index: /?hash=${AUTH_HASH}|" "\$COMPOSE_FILE"

      # Cleanly remove the entire pre-install-cmd line from the final compose file
      echo "🔧 Removing pre-install-cmd from final compose file..."
      sed -i '/^[[:space:]]*pre-install-cmd:/d' "\$COMPOSE_FILE"
    fi
    
    # Step 4: Wait for container to be created
    echo "🔍 Step 4: Waiting for container to be created..."
    counter=0
    max_wait=60  # 60 seconds max wait
    
    while [ \$counter -lt \$max_wait ]; do
      if docker ps -a --filter "name=\$CONTAINER_NAME" --format "{{.Names}}" | grep -q "^\$CONTAINER_NAME\$"; then
        echo "✅ Container \$CONTAINER_NAME found after \$counter seconds"
        break
      fi
      echo "⏳ Container not found yet... (\${counter}s/\${max_wait}s)"
      sleep 2
      counter=\$((counter + 2))
    done
    
    if ! docker ps -a --filter "name=\$CONTAINER_NAME" --format "{{.Names}}" | grep -q "^\$CONTAINER_NAME\$"; then
      echo "❌ Container \$CONTAINER_NAME not found after \${max_wait}s"
      echo "📋 Available containers:"
      docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
      exit 1
    fi
    
    # Step 5: Restart the container with new compose file
    echo "🔄 Step 5: Restarting container with updated compose file..."
    
    cd "/DATA/AppData/casaos/apps/yunderagithubcompiler"
    docker compose up -d --force-recreate
    
    # Step 6: Verify the restart
    echo "✅ Step 6: Verifying restart..."
    sleep 5
    
    NEW_STATUS=\$(docker ps --filter "name=\$CONTAINER_NAME" --format "{{.Status}}")
    if [ -n "\$NEW_STATUS" ]; then
      echo "✅ Container \$CONTAINER_NAME is now running: \$NEW_STATUS"
      
      if docker exec "\$CONTAINER_NAME" test -S /var/run/docker.sock 2>/dev/null; then
        echo "✅ Docker.sock is successfully mounted and accessible in container"
      else
        echo "❌ Docker.sock is NOT accessible in container"
      fi
    else
      echo "❌ Container \$CONTAINER_NAME is not running after restart"
    fi
    
    echo "🏁 Watcher script completed at \$(date)"
    EOF
    
    # Make it executable and run in background
    chmod +x /tmp/yundera-docker-sock-fixer.sh
    nohup /tmp/yundera-docker-sock-fixer.sh > /tmp/yundera-docker-sock-fixer.log 2>&1 &
    
    echo "🚀 Docker.sock fixer launched, check logs at /tmp/yundera-docker-sock-fixer.log"
