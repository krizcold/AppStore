name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    user: "root"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        npm run setup
    environment:
      # Application settings
      WEBUI_PORT: "3000"
      
      # CasaOS integration
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      DATA_ROOT: $DATA_ROOT

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # persistent UI data storage
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/uidata
        target: /app/uidata

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /app/uidata
          description:
            en_us: "Persistent UI data storage."

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    #!/bin/bash
    set -e
    
    echo "🚀 Pre-install: Arming the background fixer script via template method."

    # 1. Generate the dynamic values needed for the final script.
    AUTH_HASH=$(openssl rand -hex 32)
    if [ -z "$AUTH_HASH" ]; then exit 1; fi
    echo "🔐 Generated AUTH_HASH: ${AUTH_HASH:0:16}..."
    
    COMPOSE_FILE_PATH="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    TEMPLATE_FILE="/tmp/fixer_template.sh"
    FINAL_FIXER_SCRIPT="/tmp/yundera_final_fixer.sh"

    # 2. Create the clean template file line-by-line. This is completely safe.
    #    It uses placeholders like __AUTH_HASH__ to avoid variable expansion here.
    echo '#!/bin/bash' > "$TEMPLATE_FILE"
    echo "echo '--- [Fixer] Activated. Waiting 15s for initial install...'" >> "$TEMPLATE_FILE"
    echo "sleep 15" >> "$TEMPLATE_FILE"
    
    echo "echo '--- [Fixer] Looking for compose file...'" >> "$TEMPLATE_FILE"
    echo "if [ ! -f \"__COMPOSE_FILE_PATH__\" ]; then" >> "$TEMPLATE_FILE"
    echo "  echo '--- [Fixer] ERROR: Compose file not found. Exiting.'" >> "$TEMPLATE_FILE"
    echo "  exit 1" >> "$TEMPLATE_FILE"
    echo "fi" >> "$TEMPLATE_FILE"
    echo "echo '--- [Fixer] ✅ Compose file found. Applying all modifications...'" >> "$TEMPLATE_FILE"
    
    echo "DOCKER_GID=\$(stat -c '%g' /var/run/docker.sock 2>/dev/null || echo 999)" >> "$TEMPLATE_FILE"

    echo "# 1. Add docker.sock mount" >> "$TEMPLATE_FILE"
    echo "sed -i '/^[[:space:]]*read_only:[[:space:]]*true/a \\
          - type: bind\\
            source: /var/run/docker.sock\\
            target: /var/run/docker.sock' \"__COMPOSE_FILE_PATH__\"" >> "$TEMPLATE_FILE"

    echo "# 2. Add environment variables" >> "$TEMPLATE_FILE"
    echo "sed -i \"/WEBUI_PORT:/a \\
          DOCKER_GID: \\\"\$DOCKER_GID\\\"\\
          AUTH_HASH: \\\"__AUTH_HASH__\\\"\" \"__COMPOSE_FILE_PATH__\"" >> "$TEMPLATE_FILE"

    echo "# 3. Modify the index line" >> "$TEMPLATE_FILE"
    echo "sed -i \"s|index: /|index: /?hash=__AUTH_HASH__|\" \"__COMPOSE_FILE_PATH__\"" >> "$TEMPLATE_FILE"
    
    echo "echo '--- [Fixer] ✅ All changes applied. Restarting container...'" >> "$TEMPLATE_FILE"
    echo "(cd \"/DATA/AppData/casaos/apps/yunderagithubcompiler\" && docker-compose up -d --force-recreate)" >> "$TEMPLATE_FILE"
    echo "echo '--- [Fixer] ✅ Process complete.'" >> "$TEMPLATE_FILE"

    # 3. Create the final script by populating the template with our real values.
    echo "🔧 Populating template to create final fixer script..."
    cat "$TEMPLATE_FILE" \
      | sed "s|__COMPOSE_FILE_PATH__|${COMPOSE_FILE_PATH}|g" \
      | sed "s|__AUTH_HASH__|${AUTH_HASH}|g" \
      > "$FINAL_FIXER_SCRIPT"

    # 4. Clean up the template and launch the real fixer script in the background.
    rm "$TEMPLATE_FILE"
    chmod +x "$FINAL_FIXER_SCRIPT"
    nohup "$FINAL_FIXER_SCRIPT" > /tmp/yundera_fixer.log 2>&1 &

    echo "🏁 Pre-install finished. Background fixer is armed. See logs at /tmp/yundera_fixer.log"