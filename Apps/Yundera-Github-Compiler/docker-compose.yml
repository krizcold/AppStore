name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        set -e
        echo "🔧 (Test Mode) Checking for Docker socket mount..."
        sleep 5
        
        COMPOSE_FILE="/app/casaos-config/docker-compose.yml"
        COMPOSE_NEW_FILE="/app/casaos-config/docker-compose-new.yml"
        
        if [ ! -f "$COMPOSE_FILE" ]; then
          echo "❌ FATAL: Cannot find $COMPOSE_FILE. Check volume mounts."
          sleep 3600
          exit 1
        fi
        
        # Use grep with a character class to prevent it from finding the string in our script.
        if ! grep -q "source: /var/run/[d]ocker.sock" "$COMPOSE_FILE"; then
          echo "📝 (Test Mode) Docker socket mount not found. Generating new compose file for review."
        
          # This stateful awk script intelligently finds the correct 'volumes:' section under 'yunderagithubcompiler'.
          # 1. When it sees 'yunderagithubcompiler:', it sets a flag 'in_service=1'.
          # 2. If 'in_service' is true, it finds 'volumes:' and inserts the new block, then sets 'added=1'.
          # 3. If it sees a non-indented line, it assumes we've left the service block and resets 'in_service=0'.
          # 4. The output is safely written to a new file.
          awk '
            /^[[:space:]]*yunderagithubcompiler:/ { in_service=1 }
            in_service && /^[[:space:]]*volumes:[[:space:]]*$/ && !added {
              print;
              printf "      - type: bind\n        source: /var/run/docker.sock\n        target: /var/run/docker.sock\n";
              added=1;
              next;
            }
            /^[a-zA-Z]/ { in_service=0 }
            { print }
          ' "$COMPOSE_FILE" > "$COMPOSE_NEW_FILE"
        
          echo "✅ (Test Mode) Successfully created '$COMPOSE_NEW_FILE'."
          echo "📄 Please inspect the new file to verify the changes."
          echo "⚠️ This container will now exit. Please apply the changes from the new file and restart."
          
          # Exit cleanly to stop the container. The main application will not start.
          # This allows you to inspect the result of the test.
          exit 0
        fi
        
        echo "✅ Docker socket mount is already present."
        echo "🚀 Starting Yundera GitHub Compiler..."
        exec npm run start
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000