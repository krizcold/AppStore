name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        echo "🔧 Checking and adding Docker socket mount..."
        
        # Wait a bit for everything to settle
        echo "⏳ Waiting 10 seconds for CasaOS to finish setup..."
        sleep 10
        
        # Check if directories exist
        echo "📁 Checking directory structure..."
        if [ -d "/app" ]; then
          echo "✅ /app exists"
          ls -la /app
        else
          echo "❌ /app does not exist"
        fi
        
        if [ -d "/app/casaos-config" ]; then
          echo "✅ /app/casaos-config exists"
          ls -la /app/casaos-config
        else
          echo "❌ /app/casaos-config does not exist"
        fi
        
        COMPOSE_FILE="/app/casaos-config/docker-compose.yml"
        
        echo "🔍 Checking for compose file at '$$COMPOSE_FILE'..."
        
        # Debug info:
        echo "🔧 Debug info:"
        echo "Variable content: '$$COMPOSE_FILE'"
        echo "Variable length: $${#COMPOSE_FILE}"
        echo "ls check:"
        ls -la "/app/casaos-config/docker-compose.yml" 2>&1
        echo "Direct file access test:"
        cat "/app/casaos-config/docker-compose.yml" | head -3 2>&1
        
        printf "File exists check: "
        if [ -e "$$COMPOSE_FILE" ]; then echo "YES"; else echo "NO"; fi
        
        printf "File readable check: "
        if [ -r "$$COMPOSE_FILE" ]; then echo "YES"; else echo "NO"; fi
        
        # Fix permissions first if file exists
        if [ -e "$$COMPOSE_FILE" ]; then
          echo "✅ Found docker-compose.yml file"
          echo "🔐 Current file permissions:"
          ls -la "$$COMPOSE_FILE"
          
          echo "📝 Fixing file permissions..."
          chmod 644 "$$COMPOSE_FILE"
          echo "🔐 Updated file permissions:"
          ls -la "$$COMPOSE_FILE"
          
          echo "📄 File contents preview:"
          head -20 "$$COMPOSE_FILE"
          
          # Define parts of the string to search for and insert.
          # This prevents grep from finding the literal string inside this script block.
          PART1="docker"
          PART2=".sock"
          SOCK_PATH="/var/run/$$PART1$$PART2"
          SEARCH_STRING="source: $$SOCK_PATH"
          
          # Check if the docker socket mount already exists in the volumes section.
          if ! grep -q "$$SEARCH_STRING" "$$COMPOSE_FILE"; then
            echo "📝 Adding Docker socket mount to compose file..."
            
            # Create backup
            cp "$$COMPOSE_FILE" "$$COMPOSE_FILE.backup"

            # Create a temporary file with the exact YAML block to insert.
            # We use variables here as well to avoid self-detection by grep.
            # Note the use of double quotes to allow shell variable expansion.
            printf '%s\n' '      - type: bind' "        source: $$SOCK_PATH" "        target: $$SOCK_PATH" > /tmp/volume_to_add.txt

            # Use sed's 'r' (read file) command to insert the content after the 'volumes:' line.
            sed -i -e "/volumes:/r /tmp/volume_to_add.txt" "$$COMPOSE_FILE"

            # Clean up the temporary file
            rm /tmp/volume_to_add.txt
            
            echo "✅ Docker socket mount added successfully"
            echo "📄 Updated file preview:"
            grep -A 10 "volumes:" "$$COMPOSE_FILE"
            
            echo "🔄 Restarting container to apply changes..."
            
            # Restart this container to get the new mount
            docker-compose -f "/app/casaos-config/docker-compose.yml" restart yunderagithubcompiler
            exit 0
          else
            echo "✅ Docker socket mount already present"
          fi
        else
          echo "❌ File truly doesn't exist - this shouldn't happen based on the directory listing"
        fi
        
        echo "🚀 Starting Yundera GitHub Compiler..."
        npm run start
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000