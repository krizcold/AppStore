name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    user: root
    expose:
      - "3000"
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        chmod 644 /app/casaos-config/docker-compose.yml || true
        # Check if docker socket exists and test permissions
        if [ -S /var/run/docker.sock ]; then
          echo "🔍 Docker socket found, testing access..."
          docker --version && echo "✅ Docker access works" || echo "❌ Docker access failed"
        fi
        npm run setup
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:        
      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Mount our app directory as read-write to modify compose file
      - type: bind
        source: /DATA/AppData/casaos/apps/yunderagithubcompiler
        target: /app/casaos-config

      # Mount DATA directory as read-only
      - type: bind
        source: /DATA
        target: /DATA
        read_only: true

      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        - container: /DATA
          description:
            en_us: "Access to DATA directory (read-only via pre-install setup"

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
  pre-install-cmd: |
    # Create a background restart handler that monitors docker-compose.yml changes
    cat > /tmp/yundera-restart-handler.sh << 'EOF'
    #!/bin/bash
    echo "🔄 Yundera restart handler started, monitoring docker-compose.yml..."
    echo "🕐 Current time: $(date)"
    
    COMPOSE_FILE="/DATA/AppData/casaos/apps/yunderagithubcompiler/docker-compose.yml"
    echo "📁 Monitoring compose file: $COMPOSE_FILE"
    
    # Check every 3 seconds for up to 30 seconds (10 attempts)
    counter=0
    max_attempts=10
    
    while [ $counter -lt $max_attempts ]; do
      echo "🔍 Checking for docker.sock in compose file... (attempt $((counter + 1))/$max_attempts)"
      
      if [ -f "$COMPOSE_FILE" ]; then
        # Check if docker.sock is now in the compose file
        if grep -q "/var/run/docker.sock" "$COMPOSE_FILE"; then
          echo "📡 Docker socket detected in compose file! Triggering restart..."
          echo "📁 Using compose file: $COMPOSE_FILE"
          
          # Apply new compose configuration exactly like CasaOS does
          echo "🚀 Applying new compose configuration like CasaOS applyComposeAppSettings..."
          
          # CasaOS uses applyComposeAppSettings which does:
          # 1. Backs up current compose file
          # 2. Applies new configuration 
          # 3. Pulls updated images
          # 4. Gracefully updates containers
          
          PROJECT_NAME="yunderagithubcompiler"
          
          # Method 1: Use CasaOS API to apply settings (preferred)
          echo "🔄 Method 1: First, let's find the correct app name..."
          
          # Get list of installed compose apps to find the correct name
          echo "📋 Getting list of installed compose apps..."
          curl -s "http://localhost:8080/v2/app_management/compose" > /tmp/casaos-apps.log 2>&1
          cat /tmp/casaos-apps.log
          
          # Try to extract the actual app name (look for github compiler specifically)
          ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*github[^"]*"' /tmp/casaos-apps.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
          if [ -z "$ACTUAL_APP_NAME" ]; then
            # Fallback: look for compiler
            ACTUAL_APP_NAME=$(grep -o '"name":"[^"]*compiler[^"]*"' /tmp/casaos-apps.log | sed 's/"name":"\([^"]*\)"/\1/' | head -1)
          fi
          if [ -z "$ACTUAL_APP_NAME" ]; then
            # Fallback: look for yunderagithubcompiler exactly
            ACTUAL_APP_NAME=$(grep -o '"name":"yunderagithubcompiler"' /tmp/casaos-apps.log | sed 's/"name":"\([^"]*\)"/\1/')
          fi
          
          if [ -n "$ACTUAL_APP_NAME" ]; then
            echo "🎯 Found actual app name: $ACTUAL_APP_NAME"
            PROJECT_NAME="$ACTUAL_APP_NAME"
          else
            echo "⚠️  GitHub Compiler app not found in CasaOS compose registry"
            echo "📋 Available compose apps in the system:"
            grep -o '"name":"[^"]*"' /tmp/casaos-apps.log | sed 's/"name":"\([^"]*\)"/- \1/' || echo "Could not parse app names"
            echo "💡 This means our app isn't registered as a compose app in CasaOS"
            echo "🔄 Skipping API method, going directly to Docker Compose..."
          fi
          
          # Since our app isn't in the CasaOS compose registry, skip API and use Docker directly
          if [ -n "$ACTUAL_APP_NAME" ]; then
            echo "🔄 Trying CasaOS API to apply compose settings to: $PROJECT_NAME"
            if curl -s -X PUT "http://localhost:8080/v2/app_management/compose/$PROJECT_NAME" \
                 -H "Content-Type: application/yaml" \
                 --data-binary "@$COMPOSE_FILE" > /tmp/casaos-apply.log 2>&1; then
              echo "✅ Success with CasaOS API apply method"
              cat /tmp/casaos-apply.log
            else
              echo "⚠️  CasaOS API failed, trying docker compose method..."
              # Fall through to Method 2
            fi
          else
            echo "🔄 App not in CasaOS registry, using direct Docker Compose method..."
            
            # Method 2: Docker compose down/up to apply new config
            echo "🔄 Method 2: Using docker compose down/up to apply new configuration..."
            
            # Stop the current containers
            echo "🛑 Stopping containers..."
            docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" down
            
            # Start with new configuration
            echo "🚀 Starting with new configuration..."
            if docker compose -f "$COMPOSE_FILE" -p "$PROJECT_NAME" up -d; then
              echo "✅ Success with docker compose down/up method"
            else
              echo "❌ Docker compose down/up failed"
              exit 1
            fi
          fi
          
          echo "✅ Restart completed, handler exiting at $(date)"
          exit 0
        else
          echo "⏳ Docker socket not found yet in compose file..."
        fi
      else
        echo "⚠️  Compose file not found: $COMPOSE_FILE"
      fi
      
      sleep 3
      counter=$((counter + 1))
    done
    
    echo "⏰ Timeout reached after $((max_attempts * 3)) seconds, handler exiting at $(date)"
    exit 1
    EOF
    
    # Make it executable and run in background
    chmod +x /tmp/yundera-restart-handler.sh
    nohup /tmp/yundera-restart-handler.sh > /tmp/yundera-restart.log 2>&1 &
    
    echo "🚀 Background restart handler launched"
