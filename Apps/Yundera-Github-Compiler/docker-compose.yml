name: yunderagithubcompiler

services:
  yunderagithubcompiler:
    image: krizcold/yundera-github-compiler:latest
    container_name: yunderagithubcompiler
    restart: unless-stopped
    expose:
      - "3000"
    user: "0:0"  # Run as root for mount operations
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        echo '🔧 Setting up volume mounts for AppStore compatibility...'
        
        # Create mount points
        mkdir -p /DATA /dev /var/run
        
        # Check if we have root permissions
        echo '🔐 Checking permissions...'
        if [ "$(id -u)" -eq 0 ]; then
          echo '✅ Running as root'
        else
          echo '⚠️  Not running as root, attempting sudo...'
        fi
        
        # Mount /DATA as read-only
        echo '📁 Mounting /DATA as read-only...'
        if sudo mount --bind /DATA /DATA 2>/dev/null || mount --bind /DATA /DATA; then
          if sudo mount -o remount,ro,bind /DATA 2>/dev/null || mount -o remount,ro,bind /DATA; then
            echo '✅ /DATA mounted read-only'
          else
            echo '⚠️  Failed to remount /DATA as read-only'
          fi
        else
          echo '⚠️  Failed to mount /DATA'
        fi
        
        # Mount /dev as read-only  
        echo '📁 Mounting /dev as read-only...'
        if sudo mount --bind /dev /dev 2>/dev/null || mount --bind /dev /dev; then
          if sudo mount -o remount,ro,bind /dev 2>/dev/null || mount -o remount,ro,bind /dev; then
            echo '✅ /dev mounted read-only'
          else
            echo '⚠️  Failed to remount /dev as read-only'
          fi
        else
          echo '⚠️  Failed to mount /dev'
        fi
        
        # Mount docker socket if available
        if [ -S /var/run/docker.sock ]; then
          echo '📁 Mounting docker.sock...'
          if sudo mount --bind /var/run/docker.sock /var/run/docker.sock 2>/dev/null || mount --bind /var/run/docker.sock /var/run/docker.sock; then
            echo '✅ docker.sock mounted'
          else
            echo '⚠️  Failed to mount docker.sock'
          fi
        else
          echo '⚠️  Docker socket not found - will try to access via network'
        fi
        
        echo '✅ Volume mount setup complete'
        echo '🚀 Starting Yundera GitHub Compiler...'
        npm run start
    environment:
      # --> GitHub token for repository access
      # REPO_0: "https://<TOKEN>@github.com/yourorg/private-repo-1.git"
      # REPO_1: "https://<TOKEN>@github.com/yourorg/private-repo-2.git"
      # --> Optional: disable auto-update on a per-repo basis
      # REPO_0_AUTOUPDATE: "true"

      # --> Optional: Run a custom command on run
      # DIAG_COMMAND: ""

      UPDATE_INTERVAL: "3600"
      FORCE_UPDATE_GLOBAL: "true"
      WEBUI_PORT: "3000"
      
      # AppStore deployment mode
      DEPLOYMENT_MODE: "appstore"
      CASAOS_API_HOST: "localhost"
      CASAOS_API_PORT: "8080"
      
      # Add CasaOS-like environment variables (from NSL setup)
      PUID: ${PUID}
      PGID: ${PGID}
      DATA_ROOT: "/DATA"
      REF_NET: "pcs"

    volumes:
      # allow the compiler to launch docker
      #- type: bind
      #  source: /var/run/docker.sock
      #  target: /var/run/docker.sock

      # cloned repos
      - type: bind
        source: /DATA/AppData/yunderagithubcompiler/repos
        target: /app/repos

      # Add DATA root access (same as CasaOS container)
      #- type: bind
      #  source: /DATA
      #  target: /DATA
      #  read_only: true
        
      # Add device access (same as CasaOS container)
      #- type: bind
      #  source: /dev
      #  target: /dev
      #  read_only: true

    # Connect to the same network as the CasaOS service
    networks:
      - pcs
    
    # Add privileges to access CasaOS data (similar to CasaOS container)
    privileged: true
    
    # Add capabilities
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

    x-casaos:
      volumes:
        - container: /app/repos
          description:
            en_us: "Git repos are cloned here."
        # /DATA and /dev mounted via startup command

# Define the network as external, since it's created by the main NSL stack
networks:
  pcs:
    external: true

x-casaos:
  architectures:
    - amd64
    - arm64
  main: yunderagithubcompiler
  author: krizcold
  developer: krizcold
  icon: https://github.com/krizcold/Yundera-Github-Compiler/blob/main/YunderaCompiler.png?raw=true
  tagline:
    en_us: "Automatically build and deploy GitHub repos on Yundera"
  category: Utilities
  description:
    en_us: "Clone, build, and run Docker-based projects directly from GitHub URLs."
  title:
    en_us: "Yundera GitHub Compiler"
  store_app_id: yunderagithubcompiler
  is_uncontrolled: false
  index: /
  webui_port: 3000
