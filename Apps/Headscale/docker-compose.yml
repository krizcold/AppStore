name: headscale

services:
  headscale:
    image: headscale/headscale:v0.26.1
    container_name: headscale
    hostname: headscale
    cpu_shares: 10
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    user: $PUID:$PGID
    volumes:
      - /DATA/AppData/headscale/config:/etc/headscale
      - /DATA/AppData/headscale/data:/var/lib/headscale
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      HEADSCALE_SERVER_URL: https://headscale-$domain
      HEADSCALE_LISTEN_ADDR: 0.0.0.0:8080
      HEADSCALE_METRICS_LISTEN_ADDR: 0.0.0.0:9090
    expose:
      - 8080  # HTTP/web interface (NSL router handles HTTPS)
    ports:
      - "50443:50443"  # gRPC port for Tailscale client communication
      - "9090:9090"    # Metrics port for monitoring
      - "3478:3478/udp"  # STUN port for NAT traversal
    command: ["headscale", "serve"]
    restart: unless-stopped
    networks:
      - headscale

networks:
  headscale:
    driver: bridge

x-casaos:
  main: headscale
  webui_port: 8080
  pre-install-cmd: |
    mkdir -p /DATA/AppData/headscale/{config,data} &&
    chown -R $PUID:$PGID /DATA/AppData/headscale/ &&
    if [ ! -f /DATA/AppData/headscale/config/config.yaml ]; then
      curl -s https://raw.githubusercontent.com/juanfont/headscale/v0.26.1/config-example.yaml -o /DATA/AppData/headscale/config/config.yaml &&
      sed -i "s|server_url: http://127.0.0.1:8080|server_url: https://headscale-$domain|g" /DATA/AppData/headscale/config/config.yaml &&
      sed -i "s|listen_addr: 127.0.0.1:8080|listen_addr: 0.0.0.0:8080|g" /DATA/AppData/headscale/config/config.yaml &&
      sed -i "s|metrics_listen_addr: 127.0.0.1:9090|metrics_listen_addr: 0.0.0.0:9090|g" /DATA/AppData/headscale/config/config.yaml &&
      sed -i "s|grpc_listen_addr: 127.0.0.1:50443|grpc_listen_addr: 0.0.0.0:50443|g" /DATA/AppData/headscale/config/config.yaml &&
      chown $PUID:$PGID /DATA/AppData/headscale/config/config.yaml
    fi

  architectures:
    - amd64
    - arm64
  author: Yundera AppStore
  category: Network
  description:
    en_us: "Complete Headscale setup with both the server and web UI. Headscale is an open source, self-hosted implementation of the Tailscale control server. This bundle includes the Headscale server for VPN coordination and a community-developed web interface for easy device management. Create secure mesh VPN connections between your devices without relying on Tailscale's servers - perfect for self-hosting enthusiasts."
  developer: Juan Font
  icon: https://cdn.jsdelivr.net/gh/Yundera/AppStore@main/Apps/Headscale/icon.png
  screenshot_link:
    - https://cdn.jsdelivr.net/gh/Yundera/AppStore@main/Apps/Headscale/screenshot-1.png
    - https://cdn.jsdelivr.net/gh/Yundera/AppStore@main/Apps/Headscale/screenshot-2.png
    - https://cdn.jsdelivr.net/gh/Yundera/AppStore@main/Apps/Headscale/screenshot-3.png
  tagline:
    en_us: Self-hosted Tailscale control server - ready to use!
  title:
    en_us: Headscale
  tips:
    before_install:
      en_us: |
        **ðŸš€ Ready-to-Use Headscale Setup**
        
        This installation includes:
        - âœ… Headscale server (pre-configured)
        - âœ… Built-in web interface for management
        - âœ… Automatic setup and configuration
        - âœ… Default user and API key creation
        
        **ðŸ“± After Installation:**
        
        1. **Access Web UI**: Visit `https://headscale-yourusername.nsl.sh/`
        2. **Connect Devices**: Use this command on your devices:
           ```
           tailscale up --login-server https://headscale-yourusername.nsl.sh
           ```
        3. **Approve Devices**: Use the web UI to approve new device connections
        
        - Default user: `default-user`
        - API key: Auto-generated and configured
        - All settings optimized for NSL.SH domains
        
        **ðŸ’¡ Pro Tips:**
        - Install Tailscale client on your devices first
        - Check the web UI for connection status
        - gRPC communication happens on port 50443
        - STUN/NAT traversal uses UDP port 3478
        - Use the metrics endpoint at port 9090 for monitoring
        
        No manual configuration required - everything works out of the box! ðŸŽ‰