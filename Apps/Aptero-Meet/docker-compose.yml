name: meetfrontend

services:           

  reverse_proxy:
    image: nginx:1.23.3
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - webtraefik
    volumes:
      #- ./reverse_proxy_conf/nginx.conf:/etc/nginx/nginx.conf
      #- ./reverse_proxy_conf/conf.d:/etc/nginx/conf.d/ 
      - type: bind
        source: /DATA/AppData/$AppID/reverse_proxy_conf/configs
        target: /etc/nginx/
      #- ./reverse_proxy_conf/ssl/:/etc/ssl/
      #- ./reverse_proxy_conf/access/:/etc/access/
      - type: bind
        source: /DATA/AppData/$AppID/reverse_proxy_conf/ssl/
        target: /etc/ssl/
      - type: bind
        source: /DATA/AppData/$AppID/reverse_proxy_conf/access/
        target: /etc/access/
      

    labels:
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.docker.network=webtraefik"
      - "traefik.frontend.rule=Host:80-meetfrontend-${REF_DOMAIN}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.entryPoints=http,https"
    depends_on:
      - db
      - meetfrontend
      - reticulum
    x-casaos:
      hidden: true

  meetfrontend:
    hostname: meetfrontend
    image: aptero/aptero-hub:latest
    networks:
      - webtraefik
    expose:
      - "80"
    restart: unless-stopped
    volumes:
      - type: bind
        source: /DATA/AppData/$AppID/hubconf
        target: /usr/share/nginx/html/hubconf
      - /workspace/data/apterohub/data:/usr/share/nginx/html/data
      - static-web-volume:/usr/share/nginx/html/

  db:
    networks:
      - webtraefik
    hostname: db
    image: postgres:10
    command: postgres -c 'max_connections=250'
    expose:
      - "5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      #- /workspace/data/reticulum_alpha/db/:/var/lib/postgresql/data
      - type: bind
        source: /DATA/AppData/$AppID/db
        target: /var/lib/postgresql/data
    x-casaos:
      hidden: true
      
  reticulum:
    networks:
      - webtraefik
    hostname: reticulum
    image: aptero/aptero-reticulum:latest
    environment:
      - "MAIN_HOST=80-meetfrontend-${REF_DOMAIN}"
      - "NODE_ENV=production"
      - "DB_USER=postgres"
      - "DB_PWD=postgres"
      - "DB_NAME=ret_prod"
      - "DB_HOST=db"
      - "JWT_SECRET=${JWT_SECRET}"                       # User provided
      - "USER_SERVICE_URL=https://80-meetfrontend-${REF_DOMAIN}/service/dbapi"
      - "YOUTUBE_API_KEY=${YOUTUBE_API_KEY}"             # User provided
      - "UPLOAD_ENCRYPTION_KEY=${UPLOAD_ENCRYPTION_KEY}" # User provided
      - "IFRAME_SCP=https://*"
      - "SCRIPT_SRC=https://aframe.io https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js https://s.ytimg.com https://ssl.google-analytics.com https://www.google-analytics.com https://www.youtube.com https://www.googletagmanager.com"
      - "PHOTOMNEMONIC_ENDPOINT=https://80-meetfrontend-${REF_DOMAIN}/service/photomnemonic"
      - "SMTP_HOST=mail.privateemail.com"                # User provided
      - "SMTP_PORT=465"                                  # User provided
      - "SMTP_USERNAME=${SMTP_USERNAME}"                 # User provided
      - "SMTP_PASSWORD=${SMTP_PASSWORD}"                 # User provided
      - "PERMS_KEY=${PERMS_KEY}"                         # User provided
    volumes:
      #- /workspace/data/reticulum_alpha/storage/:/ret/storage/
      - type: bind
        source: /DATA/AppData/$AppID/reticulum/storage
        target: /ret/storage
      - static-web-volume:/ret/storage/assets/
      #- type: bind
      #  source: /DATA/AppData/$AppID/reticulum/assets
      #  target: /ret/storage/assets
    depends_on:
      - db
    x-casaos:
      hidden: true
      envs:
        - container: JWT_SECRET
          description:
            en_us: "JWT key (HS512). Must be unique."
        - container: YOUTUBE_API_KEY
          description:
            en_us: "YouTube API key for embedded videos."
        - container: UPLOAD_ENCRYPTION_KEY
          description:
            en_us: "Key used for uploads encryption. Must be unique."
        - container: SMTP_HOST
          description:
            en_us: "SMTP server hostname."
        - container: SMTP_PORT
          description:
            en_us: "SMTP server port."
        - container: SMTP_USERNAME
          description:
            en_us: "SMTP server username."
        - container: SMTP_PASSWORD
          description:
            en_us: "SMTP server password."
        - container: PERMS_KEY
          description:
            en_us: "RSA 2048 permissions key. Must be unique."
      
  spoke:    
    image: aptero/aptero-spoke:latest
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - webtraefik
    labels:
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.docker.network=webtraefik"
      #- "traefik.frontend.rule=Host:alphahub.aptero.co;PathPrefixStrip:/opal/"   
      - "traefik.frontend.rule=Host:80-meetfrontend-${REF_DOMAIN};PathPrefixStrip:/opal/"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.entryPoints=http,https"
    volumes:
      #- ./spokeconf/properties.js:/usr/share/nginx/html/properties.js
      - type: bind
        source: /DATA/AppData/$AppID/spokeconf/properties.js
        target: /usr/share/nginx/html/properties.js

networks:
  webtraefik:
    external: true

volumes:
  static-web-volume:

x-casaos:
  architectures:
    - amd64
    - arm64
  main: meetfrontend
  author: Aptero
  developer: Aptero
  icon: "https://github.com/krizcold/AppStore/blob/main/Apps/Aptero-Meet/icon.png?raw=true"
  tagline:
    en_us: "Custom immersive training made fast with Aptero"
  category: Productivity
  description:
    en_us: >
      Aptero Meet integrates our custom 3D platform and our web editor (Opal) to enable interactive lessons, immersive job discovery, and AI-guided training at a fraction of the cost.
  title:
    en_us: "Aptero Meet"
  index: /
  webui_port: 80
  pre-install-cmd: >
    sh -c "mkdir -p /DATA/AppData/meetfrontend/hubconf && mkdir -p /DATA/AppData/meetfrontend/db && docker run --rm -e REF_DOMAIN=${REF_DOMAIN} -v /DATA/AppData/meetfrontend/hubconf:/app/hubconf -v /DATA/AppData/meetfrontend/db:/var/lib/postgresql/data aptero/aptero-services-initializer:latest"